var mongoose = require('app/db/mongoose_connect.js');
var RETRIES_ON_DUPLICATE_ID = 10;

var idHelper =  {
    generateId : function(len){
        var options = {
            addLowercase : true,
            onlyLowercase : false
        };

        var lettersStr = "abcdefghjklmnpqrstuvwxyz";
        var letters = [];
        if (!options.onlyLowercase) {
            letters = letters.concat(lettersStr.toUpperCase().split("")); //No o,i
        }
        if (options.addLowercase || options.onlyLowercase){
            letters = letters.concat(lettersStr.toLowerCase().split(""));
        }
        var numbers = "123456789".split("");//no 0
        var both = letters.concat(numbers);

        var code = "";
        for (var i = 1; i < len+1; i++){//not i=0 because of i%3 call
            var arr;
            if (i % 3 != 0){
                arr = both;
            }
            else{
                arr = numbers;
            }
            var randIndex = parseInt(Math.random() * arr.length);
            code += arr[randIndex];
        }
        return code;
    },

    generateUniqueId: function(modelName, field, doc, next, options){
        options = options ? options : {};
        var len = options.length ? options.length : 10;

        var id = this.generateId(len);
        var model = mongoose.model(modelName);

        var retries = 0;

        var check = function() {
            model.findOne({field : id}, function (err, _doc) {
                if (err || _doc) {
                    console.log('failed with err : ' + err);
                    if (retries < RETRIES_ON_DUPLICATE_ID) {
                        id = this.generateId(len, options);
                        retries++;
                        check();
                    }
                    else{
                        if (options.callback){
                            options.callback(new Error("Unable to generate unique " + field), null);
                        }
                        else{
                            next(new Error("Unable to generate unique " + field));
                        }
                    }
                }
                else{
                    if (options.callback){
                        options.callback(null, id);
                    }
                    else{
                        doc[field] = id;
                        next();
                    }
                }
            });
        };

        check();
    }

};

module.exports = idHelper;

