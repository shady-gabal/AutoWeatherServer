/**
 * Created by shadygabal on 11/19/16.
 */
var isHeroku = (process.env.DYNO) ? true : false;
var request = require('request');
var moment = require('moment');

if (!isHeroku){
    //local .env
    require('dotenv').config({silent: true});
}

var env = require('get-env')({
    development : ['dev', 'development'],
    production : ['prod', 'production'],
    test : ['test']
});

module.exports = {
    env : env,
    isHeroku : isHeroku,
    development: env === 'development',
    production : env === 'production',
    test : env === 'test',
    devOrTest : (env === 'development' || env === 'test'),
    requestUrl: function(url, callback){
        var timeoutInMilliseconds = 10*1000;
        var opts = {
            url: url,
            timeout: timeoutInMilliseconds
        };

        request(opts, function (err, response, body) {
            if (err) {
                console.log("Error requesting " + url + ": " + err);
                if (err){
                    callback(err, null);
                }
            }
            else{
                try{
                    var json = JSON.parse(body);
                    callback(null, json);
                }
                catch(e){
                    callback(e, null);
                }
            }
        });
    },
    loopThroughObject : function(obj, forLoop){
        if (typeof obj === 'object'){
            for (var key in obj) {
                if (!obj.hasOwnProperty(key)) {
                    continue;
                }

                forLoop(key, obj[key]);
            }
        }
    },
    INTERVAL : 30,
    WEATHER_UPDATE_TIME : "2:30AM",
    weatherUpdateHour : function(customTime){
        customTime = customTime ? customTime : this.WEATHER_UPDATE_TIME;
        var hour = parseInt(customTime.split(":")[0]);
        if (customTime.toUpperCase().indexOf("PM") != -1 && hour != 12 ){
            hour += 12;
        }
        return hour;
    },
    PAST_FORECASTS_LENGTH : 7,
    MIN_PRECIP_PROBABILITY : 0.5,
    notificationTimeFromDate : function(date, convertToUtc){
        var momentDate = moment(date);
        if (convertToUtc){
            momentDate = momentDate.utc();
        }
        return momentDate.format("h:mmA").toUpperCase();

    },
    tzToUTCNotificationTime : function(notification_time, tz){
        return moment.tz(notification_time, "h:mmA", tz).utc().format("h:mmA")
    },
    currentUTCNotificationTime : function(){
        var interval = this.INTERVAL;
        var date = moment().utc().toDate();

        if (date.getMinutes() % interval != 0){
            var remainder = date.getMinutes() % interval;
            if (remainder <= interval / 2){
                remainder = remainder + interval; //if within 5 minutes, reset to lower bound
            }
            date.setMinutes(date.getMinutes() + (interval - remainder));
        };

        var currTime = this.notificationTimeFromDate(date, true);

        return currTime;
    },
    dateSecondsFromUTC : function(date, seconds_from_utc){
        date = new Date(date.getTime() + (seconds_from_utc * 1000));
        return date;
    },
    convertToCelsius : function(f){
        return (f - 32) * 5/9;
    }

};