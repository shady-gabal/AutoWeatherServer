var mongoose = require('app/db/mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;
var WeatherHelper = require('app/helpers/WeatherHelper');
var DailyForecast = require('app/db/DailyForecast.js');

var customSchema = new Schema({
        zipcode: {type: String, required: true, unique: true},
        last_updated_at: {type: Date},
        _current_forecast : {type: ObjectId, ref: "DailyForecast"},
        _past_forecasts : [{type: ObjectId, ref: "DailyForecast"}],
        location_city: {type: String},
        location_region: {type: String},
        location_country: {type: String}

    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.statics.findForZipcode = function(zipcode, callback){
    this.findOne({"zipcode" : zipcode}).populate("_current_forecast").exec(function(err, weather){
       if(err){
           console.log(err);
           callback(err, null);
       }
        else{
           console.log(weather);
           callback(null, weather);
       }
    });
};

customSchema.statics.createForZipcode = function(zipcode, callback){
    var weather = new this({
        "zipcode": zipcode
    });

    weather.save(function(err, _weather){
       if(err){
           console.log(err);
           callback(err, _weather);
       }
        else{
           _weather.updateWeather(function(err2){
               callback(err2, _weather);
           });
       }
    });
};

customSchema.statics.findOrCreateForZipcode = function(zipcode, callback){

    var WeatherAtZipcode = this;

    this.findForZipcode(zipcode, function(err, weather){
        if(err){
            console.log(err);
            callback(err, null);
        }
          else if (weather){
            callback(err, weather);
        }
          else{
            WeatherAtZipcode.createForZipcode(zipcode, callback);
        }

    });
};


customSchema.methods.updateWeather = function(callback){
    var weather = this;
    callback = callback ? callback : function(){};

    DailyForecast.forecastForZipcode(this.zipcode, function(err, forecast){
       if(err){
           callback(err);
       }
        else{
           function populateCallback(){
               if (weather._current_forecast){
                   var old_forecast = weather._current_forecast;
                   weather._past_forecasts.push(old_forecast._id);
               }

               weather._current_forecast = forecast._id;
               weather.save(callback);
           };

           if (weather._current_forecast) {

               weather.populate("_current_forecast", function(err2, _weather){
                   if(err2){
                       console.log(err2);
                       callback(err2);
                   }
                   else{
                       populateCallback();
                   }
               });
           }
           else{
               populateCallback();
           }
       }
    });
};

customSchema.statics.testUpdate = function(){
    //var DailyForecast = mongoose.model("DailyForecast");

    DailyForecast.forecastForZipcode("11369", function(err, forecast){
    });
};

customSchema.virtual('').get(function () {
});


customSchema.pre("save", function (next) {
    next();
});

customSchema.post("init", function (doc) {

});


module.exports = mongoose.model('WeatherAtZipcode', customSchema);