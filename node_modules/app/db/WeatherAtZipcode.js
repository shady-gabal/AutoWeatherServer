var mongoose = require('app/db/mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;
var WeatherHelper = require('app/helpers/WeatherHelper');
var DailyForecast = require('app/db/DailyForecast.js');
var autopopulate = require('mongoose-autopopulate');
var vsprintf = require("sprintf-js").vsprintf;
var Globals = require('app/helpers/Globals');

var customSchema = new Schema({
        zipcode: {type: String, required: true, unique: true},
        last_updated_at: {type: Date},
        _current_forecast : {type: ObjectId, ref: "DailyForecast", autopopulate: true},
        _past_forecasts : [{type: ObjectId, ref: "DailyForecast"}],
        location_city: {type: String},
        location_region: {type: String},
        location_country: {type: String},
        update_time_utc : {type: String}

    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.plugin(autopopulate);

customSchema.statics.findForZipcode = function(zipcode, callback){
    this.findOne({"zipcode" : zipcode}).populate("_current_forecast").exec(function(err, weather){
       if(err){
           console.log(err);
           callback(err, null);
       }
        else{
           console.log(weather);
           callback(null, weather);
       }
    });
};

customSchema.statics.createNewZipcode = function(data, callback){
    var zipcode = data.zipcode;
    var tz = data.timeZone;

    var weather = new this({
        "zipcode": zipcode,
        "update_time_utc" : Globals.tzToUTCNotificationTime(Globals.WEATHER_UPDATE_TIME, tz)
    });

    weather.save(function(err, _weather){
       if(err){
           console.log(err);
           callback(err, _weather);
       }
        else{
           _weather.updateWeather(function(err2){
               if (callback){
                   callback(err2, _weather);
               }
           });
       }
    });
};

customSchema.statics.findOrCreateForZipcode = function(zipcode, callback){

    var WeatherAtZipcode = this;

    this.findForZipcode(zipcode, function(err, weather){
        if(err){
            console.log(err);
            callback(err, null);
        }
          else if (weather){
            callback(err, weather);
        }
          else{
            WeatherAtZipcode.createForZipcode(zipcode, callback);
        }

    });
};


customSchema.methods.updateWeather = function(callback){
    var weather = this;
    callback = callback ? callback : function(){};

    DailyForecast.forecastForZipcode(this.zipcode, function(err, forecast){
       if(err){
           callback(err);
       }
        else{
           if (weather._current_forecast){
               var old_forecast = weather._current_forecast;
               weather._past_forecasts.push(old_forecast._id);
           }

           weather._current_forecast = forecast._id;
           weather.save(callback);
       }
    });
};

customSchema.methods.weatherDescription = function(){
    //t-shirt and shorts weather = 70+
    //beautiful = 63-69
    //light sweatshirt = 56-62
    //jacket = 47-55
    //heavy jacket = 40-46
    //bundle up = 39-

    var forecast = this._current_forecast;

    var highLow = vsprintf("High/low will be %d°/%d°", [forecast.maxtemp_f, forecast.mintemp_f]);

    var prefixes = ["It's %s today! %s. You should wear %s. %s", "Today will be %s! %s. Wear %s! %s", "Looks like we're in for %s weather today! %s. Wear %s. %s"];
    var indexesWithSingular = [1];

    var temp = this._current_forecast.maxtemp_f;
    var weather = [];
    var clothing = "";

    if (temp >= 93){
        weather = ["really hot"];
        clothing = "tanktops";
    }
    if (temp >= 83){
        weather = ["hot"];
        clothing = "tanktops if you want";
    }
    if (temp >= 70){
        if (this.willItRain()){
            weather = ["warm"];
        }
        weather = ["beautiful", "gorgeous"];
        clothing = "shorts if you want";
    }
    else if (temp >= 63){
        weather = ["a little cool"];
        clothing = "a light sweatshirt";
    }
    else if (temp >= 57){
        weather = ["a little chilly"];
        clothing = "a light jacket";
    }
    else if (temp >= 50){
        weather = ["chilly"];
        clothing = "a jacket";
    }
    else if (temp >= 45){
        weather = ["cold"];
        clothing = "a heavy jacket";
    }
    else if (temp >= 30){
        weather = ["very cold"];
        clothing = "a heavy jacket and a scarf";
    }
    else if (temp >= 10){
        weather = ["freezing"];
        clothing = "multiple layers with a hat and scarf";
    }
    else{
        weather = ["very freezing"];
        clothing = "as many layers as you can, with a hat and scarf";
    }

    var prefixIndex = parseInt(Math.random() * prefixes.length);
    var prefix = prefixes[prefixIndex];

    var randWeather = weather[parseInt(Math.random() * weather.length)];

    var msg = vsprintf(prefix, [randWeather, highLow, clothing, this.precipDescription()]);

    return msg;
};

customSchema.methods.willItRain = function(){
    return this._current_forecast.rain_start_time != -1;
};

customSchema.methods.willItSnow = function(){
    return this._current_forecast.snow_start_time != -1;
};

customSchema.methods.precipDescription = function(){

    var rainStart = this._current_forecast.rain_start_time;
    var snowStart = this._current_forecast.snow_start_time;

    var precip;
    var hour;

    var msg = "";

    if (this.willItRain()){
        //if (Globals.USER_NOTIFICATION_HOUR < rainStart){
            msg += "rain at " + convert24Hour(rainStart)
        //}
    }
    if (this.willItSnow()){
        //if (msg){
           msg += " and ";
        //}
        msg += "snow at " + convert24Hour(snowStart);
    }

    if (msg){
        return "It'll " + msg + " - bring an umbrella.";
    }
    else{
        return "No rain or snow today - enjoy!";
    }
};

function convert24Hour(hour){
  if (hour > 12){
      hour -= 12;
      return hour + "PM";
  }
  else if (hour == 0){
      return "12AM";
  }
  else{
      return hour + "AM";
  }
};

customSchema.statics.testUpdate = function(){
    //var DailyForecast = mongoose.model("DailyForecast");

    DailyForecast.forecastForZipcode("11369", function(err, forecast){
    });
};

//customSchema.virtual('').get(function () {
//});
//
//
//customSchema.pre("save", function (next) {
//    next();
//});
//
//customSchema.post("init", function (doc) {
//
//});


module.exports = mongoose.model('WeatherAtZipcode', customSchema);