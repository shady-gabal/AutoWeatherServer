var mongoose = require('app/db/mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;
var WeatherHelper = require('app/helpers/WeatherHelper');
var DailyForecast = require('app/db/DailyForecast.js');
var autopopulate = require('mongoose-autopopulate');
var vsprintf = require("sprintf-js").vsprintf;

var customSchema = new Schema({
        zipcode: {type: String, required: true, unique: true},
        last_updated_at: {type: Date},
        _current_forecast : {type: ObjectId, ref: "DailyForecast", autopopulate: true},
        _past_forecasts : [{type: ObjectId, ref: "DailyForecast"}],
        location_city: {type: String},
        location_region: {type: String},
        location_country: {type: String}

    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.plugin(autopopulate);

customSchema.statics.findForZipcode = function(zipcode, callback){
    this.findOne({"zipcode" : zipcode}).populate("_current_forecast").exec(function(err, weather){
       if(err){
           console.log(err);
           callback(err, null);
       }
        else{
           console.log(weather);
           callback(null, weather);
       }
    });
};

customSchema.statics.createForZipcode = function(zipcode, callback){
    var weather = new this({
        "zipcode": zipcode
    });

    weather.save(function(err, _weather){
       if(err){
           console.log(err);
           callback(err, _weather);
       }
        else{
           _weather.updateWeather(function(err2){
               callback(err2, _weather);
           });
       }
    });
};

customSchema.statics.findOrCreateForZipcode = function(zipcode, callback){

    var WeatherAtZipcode = this;

    this.findForZipcode(zipcode, function(err, weather){
        if(err){
            console.log(err);
            callback(err, null);
        }
          else if (weather){
            callback(err, weather);
        }
          else{
            WeatherAtZipcode.createForZipcode(zipcode, callback);
        }

    });
};


customSchema.methods.updateWeather = function(callback){
    var weather = this;
    callback = callback ? callback : function(){};

    DailyForecast.forecastForZipcode(this.zipcode, function(err, forecast){
       if(err){
           callback(err);
       }
        else{
           function populateCallback(){
               if (weather._current_forecast){
                   var old_forecast = weather._current_forecast;
                   weather._past_forecasts.push(old_forecast._id);
               }

               weather._current_forecast = forecast._id;
               weather.save(callback);
           };

           if (weather._current_forecast) {

               weather.populate("_current_forecast", function(err2, _weather){
                   if(err2){
                       console.log(err2);
                       callback(err2);
                   }
                   else{
                       populateCallback();
                   }
               });
           }
           else{
               populateCallback();
           }
       }
    });
};

customSchema.methods.typeOfWeatherDescription = function(){
    //t-shirt and shorts weather = 70+
    //beautiful = 63-69
    //light sweatshirt = 56-62
    //jacket = 47-55
    //heavy jacket = 40-46
    //bundle up = 39-

    var prefixes = ["Looks like today is %s weather.", "You should wear %s today"];
    var indexesWithSingular = [1];

    var temp = this._current_forecast.maxtemp_f;
    var descriptor = "";
    var singular = true;

    if (temp >= 70){
        descriptor = "shorts";
    }
    else if (temp >= 63){
        descriptor = "light sweatshirt";
    }
    else if (temp >= 57){
        descriptor = "light jacket";
    }
    else if (temp >= 50){
        descriptor = "jacket";
    }
    else if (temp >= 45){
        descriptor = "heavy jacket";
    }
    else{
        singular = false;
        descriptor = "multiple layers and a scarf";
    }

    var prefixIndex = parseInt(Math.random() * prefixes.length);
    var prefix = prefixes[prefixIndex];

    if (indexesWithSingular.indexOf(prefixIndex) != -1 && singular){
        descriptor = "a " + descriptor;
    }

    var msg = vsprintf(prefix, [descriptor]);

    return msg;
};

customSchema.methods.precipDescription = function(){

    var rainStart = this._current_forecast.rain_start_time;
    var snowStart = this._current_forecast.snow_start_time;

    if (this._current_forecast.rain_start_time != -1 || this._current_forecast.snow_start_time != -1){
        var precip = "rain";
        var hour = rainStart;

        if (snowStart > rainStart){
            precip = "snow";
            hour = snowStart;
        }

        return "It'll " + precip + " at " + convert24Hour(hour) + " - bring an umbrella.";

    }
    else{
        return "No rain or snow today - enjoy!";
    }
};

function convert24Hour(hour){
  if (hour > 12){
      hour -= 12;
      return hour + "PM";
  }
  else if (hour == 0){
      return "12AM";
  }
  else{
      return hour + "AM";
  }
};

customSchema.statics.testUpdate = function(){
    //var DailyForecast = mongoose.model("DailyForecast");

    DailyForecast.forecastForZipcode("11369", function(err, forecast){
    });
};

//customSchema.virtual('').get(function () {
//});
//
//
//customSchema.pre("save", function (next) {
//    next();
//});
//
//customSchema.post("init", function (doc) {
//
//});


module.exports = mongoose.model('WeatherAtZipcode', customSchema);