var mongoose = require('app/db/mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;
var DailyForecast = require('app/db/DailyForecast.js');
var autopopulate = require('mongoose-autopopulate');
var vsprintf = require("sprintf-js").vsprintf;
var Globals = require('app/helpers/Globals');

var customSchema = new Schema({
        zipcode: {type: String, required: true, unique: true},
        last_updated_at: {type: Date},
        _current_forecast : {type: ObjectId, ref: "DailyForecast", autopopulate: true},
        _past_forecasts : [{type: ObjectId, ref: "DailyForecast", autopopulate: true}],
        update_time_utc : {type: String},
        timezone : {type: String},
        country : {type: String},
        lat : {type: Number},
        lon : {type: Number}

    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.plugin(autopopulate);


customSchema.statics.createNewZipcode = function(data, callback){
    var zipcode = data.zipcode;
    var tz = data.timezone;
    var country = data.country;
    var lon = data.lon;
    var lat = data.lat;

    var weather = new this({
        "zipcode": zipcode,
        "timezone" : tz,
        "country" : country,
        "lon" : lon,
        "lat" : lat
    });

    weather.save(function(err, _weather){
       if(err){
           console.log(err);
           if (callback) {
               callback(err, _weather);
           }
       }
        else{
           _weather.updateWeather(function(err2){
               if (callback){
                   callback(err2, _weather);
               }
           });
       }
    });
};


customSchema.methods.updateWeather = function(callback){
    var weather = this;
    callback = callback ? callback : function(){};

    if (weather.timezone) {
        weather.update_time_utc = Globals.tzToUTCNotificationTime(Globals.WEATHER_UPDATE_TIME, weather.timezone);
    }

    DailyForecast.forecastForLocation(this.lat, this.lon, function(err, forecast){
       if(err){
           callback(err);
       }
        else{
           if (weather._current_forecast){
               var old_forecast = weather._current_forecast;

               while(weather._past_forecasts.length >= Globals.PAST_FORECASTS_LENGTH){
                   var old = weather._past_forecasts.shift();
                   old.remove();
               }
               weather._past_forecasts.push(old_forecast);
           }

           weather._current_forecast = forecast._id;
           weather.save(callback);
       }
    });
};

customSchema.methods.weatherDescription = function(){
    //t-shirt and shorts weather = 70+
    //beautiful = 63-69
    //light sweatshirt = 56-62
    //jacket = 47-55
    //heavy jacket = 40-46
    //bundle up = 39-

    var forecast = this._current_forecast;
    if (!forecast) return "";

    var avg = this.avg_maxtemp_f;
    var highLow;

    var temps = [];
    var hours = [8, 13, 20];
    //var hours = [16, 19, 23];

    console.log(forecast.hourly_forecasts);

    forecast.hourly_forecasts.forEach(function(hourly){
       if (hours.indexOf(hourly.hour) != -1){
           temps.push(hourly.temp);
       }
    });

    if (temps.length < hours.length){
        highLow = vsprintf("High/low today is %d°/%d°", [forecast.maxtemp, forecast.mintemp]);
    }
    else{
        highLow = vsprintf("8AM: %d°, 1PM: %d°, 8PM: %d°", temps);
    }

    var prefixes = ["It'll be %s today. %s.%s %s", "Today will be %s. %s.%s %s", "Looks like we're in for %s weather today. %s.%s %s"];


    var temp = this._current_forecast.maxtemp_f;
    var weather = [];
    var weatherComp = null;
    var clothing = "";
    var showClothing = true;

    if (avg != null){
        var diff = temp - avg;

        if (diff >= 20){
            if (temp >= 70){
                weatherComp = "much hotter than usual";
            }
            else weatherComp = "much warmer than usual";
        }
        else if (diff >= 11){
            if (temp >= 70){
                weatherComp = "hotter than usual";
            }
            else weatherComp = "warmer than usual";
        }
        else if (diff >= 7){
            if (temp >= 70){
                weatherComp = "a little hotter than usual";
            }
            else weatherComp = "a little warmer than usual";
        }
        else if (diff <= -20){
            if (temp <= 40){
                weatherComp = "much colder than usual";
            }
            else weatherComp = "much cooler than usual";
        }
        else if (diff <= -11){
            if (temp <= 40){
                weatherComp = "colder than usual";
            }
            else weatherComp = "cooler than usual";
        }
        else if (diff <= -7){
            if (temp <= 40){
                weatherComp = "a little colder than usual";
            }
            else weatherComp = "a little cooler than usual";
        }
        else{
            showClothing = false;

            if (temp <= 50){
                weatherComp = "as cold as usual";
            }
            else weatherComp = "as warm as usual";
        }
    }


    if (temp >= 93){
        weather = ["really hot"];
        showClothing = false;
        clothing = "shorts and a t-shirt";
    }
    if (temp >= 83){
        weather = ["hot"];
        clothing = "shorts and a t-shirt";
    }
    if (temp >= 74){
        if (forecast.will_it_rain){
            weather = ["warm"];
        }
        weather = ["beautiful", "gorgeous"];
        clothing = "shorts if you want";
    }
    else if (temp >= 64){
        weather = ["a little cool"];
        clothing = "a light sweatshirt";
    }
    else if (temp >= 57){
        weather = ["a little chilly"];
        clothing = "a light jacket";
    }
    else if (temp >= 50){
        weather = ["chilly"];
        clothing = "a jacket";
    }
    else if (temp >= 45){
        weather = ["cold"];
        clothing = "a thick jacket";
    }
    else if (temp >= 30){
        weather = ["very cold"];
        clothing = "a thick jacket and a scarf";
    }
    else if (temp >= 15){
        weather = ["freezing"];
        clothing = "multiple layers with a hat and scarf";
    }
    else{
        weather = ["very freezing"];
        clothing = "as many layers as you can, with a hat and scarf";
    }

    var prefixIndex = parseInt(Math.random() * prefixes.length);
    var prefix = prefixes[prefixIndex];

    var randWeather = weather[parseInt(Math.random() * weather.length)];
    var weatherChoice = weatherComp ? weatherComp : randWeather;

    var clothingDesc = showClothing ? vsprintf(" You should wear %s.", [clothing]) : "";
    var msg = vsprintf(prefix, [weatherChoice, highLow, clothingDesc, this.precipDescription()]);

    return msg;
};

customSchema.methods.precipDescription = function(){

    var rainStart = this._current_forecast.rain_start_time;
    var snowStart = this._current_forecast.snow_start_time;

    var precip;
    var hour;

    var msg = "";

    var forecast = this._current_forecast;

    if (forecast.will_it_rain){
        //if (Globals.USER_NOTIFICATION_HOUR < rainStart){
            msg += "rain at " + convert24Hour(rainStart)
        //}
    }
    if (forecast.will_it_snow){
        if (msg){
           msg += " and ";
        }
        msg += "snow at " + convert24Hour(snowStart);
    }

    if (msg){
        return "It'll " + msg + " - bring an umbrella.";
    }
    else{
        return "No rain or snow today - enjoy!";
    }
};

function convert24Hour(hour){
  if (hour > 12){
      hour -= 12;
      return hour + "PM";
  }
  else if (hour == 0){
      return "12AM";
  }
  else{
      return hour + "AM";
  }
};

customSchema.statics.testUpdate = function(){
    //var DailyForecast = mongoose.model("DailyForecast");

    DailyForecast.forecastForLocation("", "", function(err, forecast){
    });
};

customSchema.virtual('avg_maxtemp_f').get(function () {
    if (this._past_forecasts.length < Globals.PAST_FORECASTS_LENGTH/2){
        return null;
    }

    var sum = 0;
    this._past_forecasts.forEach(function(forecast){
        sum += parseFloat(forecast.maxtemp_f);
    });
    return sum/this._past_forecasts.length;
});
//
//
//customSchema.pre("save", function (next) {
//    next();
//});
//
//customSchema.post("init", function (doc) {
//
//});


module.exports = mongoose.model('WeatherAtZipcode', customSchema);