var mongoose = require('app/db/mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;
var Globals = require('app/helpers/Globals.js');
var HourlyForecast = require('app/db/HourlyForecast.js');

var customSchema = new Schema({
        max_temp_f: {type: String},
        max_temp_c : {type: String},
        min_temp_f : {type: String},
        min_temp_c : {type: String},
        avg_temp_f : {type: String},
        avg_temp_c : {type: String},
        condition: {type: String},
        icon : {type: String},
        will_it_rain : {type: Number},
        will_it_snow : {type: Number},
        rain_start_time: {type: String, default: -1},
        //rain_end_time: {type: String, default: -1},
        snow_start_time: {type: String, default: -1},
        //snow_end_time: {type: String, default: -1},

        _hourly_forecasts : [{type: ObjectId, ref: "HourlyForecast"}]
    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.virtual('').get(function () {
});


customSchema.pre("save", function (next) {
    next();
});

customSchema.post("init", function (doc) {

});

customSchema.statics.withJson = function(json){
  var dailyForecast = new this({
      max_temp_f : json["max_temp_f"],
      max_temp_c : json["max_temp_c"],
      min_temp_f : json["min_temp_f"],
      max_temp_c : json["max_temp_c"],
      avg_temp_f : json["avg_temp_f"],
      avg_temp_c : json["avg_temp_c"]
  });

    return dailyForecast;
};

customSchema.statics.forecastForZipcode = function(zipcode, callback){
    var url = "https://api.apixu.com/v1/forecast.json?key=" + process.env.APIXU_API_KEY + "&q=" + zipcode;
    var DailyForecast = this;

    Globals.fetchUrl(url, function(err, json){

        if (err){
            callback(err, null);
        }
        else{
            var forecastDay = json["forecast"]["forecastday"][0];
            var dayData = forecastDay["day"];

            var dailyForecast = DailyForecast.withJson(dayData);

            var hourlyForecasts = forecastDay["hour"];

            var rainStartTime = -1;

            for (var i = 0; i < hourlyForecasts.length; i++){
                var hourly = hourlyForecasts[i];
                if (hourly["will_it_rain"] && rainStartTime == -1){
                    rainStartTime = i + 1;
                    break;
                }
                //var forecast = HourlyForecast.withJson(hour);
                //forecast.save();
                //dailyForecast._hourly_forecasts.push(forecast._id);
            }

            dailyForecast.will_it_rain = rainStartTime != -1;
            dailyForecast.rain_start_time = rainStartTime;
            dailyForecast.save();

            callback(null, dailyForecast);
        }
    });
};

customSchema.statics.currentWeatherForZipcode = function(zipcode, callback){
    var url = "https://api.apixu.com/v1/current.json?key=" + process.env.APIXU_API_KEY + "&q=" + zipcode;
    Globals.fetchUrl(url, callback);
};

customSchema.statics.forecastWithData = function(data, callback){

    var forecast = new this({

    });

    forecast.save(function(err, _forecast){
       if(err){
           console.log(err);
           callback(err, null);
       }
        else{
           console.log("created forecast: " + _forecast);
           callback(null, _forecast);
       }
    });
};


module.exports = mongoose.model('DailyForecast', customSchema);