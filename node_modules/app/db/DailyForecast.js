var mongoose = require('app/db/mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;
var Globals = require('app/helpers/Globals.js');
var HourlyForecast = require('app/db/HourlyForecast.js');

var customSchema = new Schema({
        maxtemp_f: {type: String},
        maxtemp_c : {type: String},
        mintemp_f : {type: String},
        mintemp_c : {type: String},
        avgtemp_f : {type: String},
        avgtemp_c : {type: String},
        condition: {type: String},
        icon : {type: String},
        will_it_rain : {type: Boolean},
        will_it_snow : {type: Boolean},
        rain_start_time: {type: String, default: -1},
        //rain_end_time: {type: String, default: -1},
        snow_start_time: {type: String, default: -1},
        //snow_end_time: {type: String, default: -1},
        location_city: {type: String},
        location_region: {type: String},
        location_country: {type: String},
        timezone : {type: String},
        lat : {type: Number},
        lon : {type: Number},

        _hourly_forecasts : [{type: ObjectId, ref: "HourlyForecast"}]
    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.virtual('maxtemp').get(function () {
    return this.location_country == "USA" ? this.maxtemp_f : this.maxtemp_c;
});

customSchema.virtual('mintemp').get(function () {
    return this.location_country == "USA" ? this.mintemp_f : this.mintemp_c;
});


customSchema.pre("save", function (next) {
    next();
});

customSchema.post("init", function (doc) {

});

customSchema.statics.withJson = function(json, location){
  var dailyForecast = new this({
      maxtemp_f : json["maxtemp_f"],
      maxtemp_c : json["maxtemp_c"],
      mintemp_f : json["mintemp_f"],
      mintemp_c : json["mintemp_c"],
      avgtemp_f : json["avgtemp_f"],
      avgtemp_c : json["avgtemp_c"],
      location_country : location["country"],
      location_city : location["name"],
      location_region : location["region"],
      lat : location["lat"],
      lon : location["lon"],
      timezone : location["tz_id"]
   });

    return dailyForecast;
};

customSchema.statics.forecastForZipcode = function(zipcode, callback){
    var url = "https://api.apixu.com/v1/forecast.json?key=" + process.env.APIXU_API_KEY + "&q=" + zipcode;
    var DailyForecast = this;

    Globals.requestUrl(url, function(err, json){

        if (err){
            callback(err, null);
        }
        else if (json["error"]){
            console.log(json["error"]);
            callback(json["error"], null);
        }
        else{
            var forecastObj = json["forecast"];
            if (forecastObj){
                var forecastDay = forecastObj["forecastday"][0];
                var dayData = forecastDay["day"];

                var dailyForecast = DailyForecast.withJson(dayData, json["location"]);

                var hourlyForecasts = forecastDay["hour"];

                var rainStartTime = -1;
                var snowStartTime = -1;

                for (var i = 0; i < hourlyForecasts.length; i++){
                    var hourly = hourlyForecasts[i];
                    if (hourly["will_it_rain"] && rainStartTime == -1){
                        rainStartTime = i;
                    }
                    if (hourly["will_it_snow"] && snowStartTime == -1){
                        snowStartTime = i;
                    }

                    var hourlyForecast = HourlyForecast.withJson(hourly);
                    hourlyForecast.save();
                    dailyForecast._hourly_forecasts.push(hourlyForecast._id);
                }

                dailyForecast.will_it_rain = rainStartTime != -1;
                dailyForecast.rain_start_time = rainStartTime;
                dailyForecast.will_it_snow = snowStartTime != -1;
                dailyForecast.snow_start_time = snowStartTime;

                dailyForecast.save();

                callback(null, dailyForecast);
            }

        }
    });
};

customSchema.statics.currentWeatherForZipcode = function(zipcode, callback){
    var url = "https://api.apixu.com/v1/current.json?key=" + process.env.APIXU_API_KEY + "&q=" + zipcode;
    Globals.requestUrl(url, callback);
};

customSchema.statics.forecastWithData = function(data, callback){

    var forecast = new this({

    });

    forecast.save(function(err, _forecast){
       if(err){
           console.log(err);
           callback(err, null);
       }
        else{
           console.log("created forecast: " + _forecast);
           callback(null, _forecast);
       }
    });
};


module.exports = mongoose.model('DailyForecast', customSchema);